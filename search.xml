<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Selenium用法详解</title>
    <url>/2020/03/07/Selenium/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>selenium 是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。 </p>
<p>自动化测试工具，支持多种浏览器</p>
<p>selenium用于爬虫，主要是用来解决javascript渲染的问题 </p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>BeatifulSoup的使用</title>
    <url>/2020/03/01/beatifulsoup/</url>
    <content><![CDATA[<h1 id="BeatifulSoup简介"><a href="#BeatifulSoup简介" class="headerlink" title="BeatifulSoup简介"></a>BeatifulSoup简介</h1><p>灵活又方便的解析网页解析库，处理高效，支持多种解析器。</p>
<p>利用它不用编写正则表达式即可方便地实现网页信息的提取。</p>
<h1 id="BeatifulSoup主要解析器"><a href="#BeatifulSoup主要解析器" class="headerlink" title="BeatifulSoup主要解析器"></a>BeatifulSoup主要解析器</h1><p><img src="/images/page4.png" alt="此图片不可显示"></p>
<h1 id="BeatifulSoup演示案例"><a href="#BeatifulSoup演示案例" class="headerlink" title="BeatifulSoup演示案例"></a>BeatifulSoup演示案例</h1><h2 id="aa-html"><a href="#aa-html" class="headerlink" title="aa.html"></a>aa.html</h2><p><img src="/images/page5.png" alt="此图片不可显示"></p>
<h2 id="demo-py"><a href="#demo-py" class="headerlink" title="demo.py"></a>demo.py</h2><p><img src="/images/page6.png" alt="此图片不可显示"></p>
<h1 id="BeatifulSoup4的四大种类"><a href="#BeatifulSoup4的四大种类" class="headerlink" title="BeatifulSoup4的四大种类"></a>BeatifulSoup4的四大种类</h1><p>BeautifulSoup4将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种:</p>
<ul>
<li><p><strong>Tag</strong>                 </p>
<blockquote>
<p>通俗的讲就是HTML里的标签，可以利用soup加标签名轻松获得标签的内容，但是查找的内容是第一个符合要求的标签</p>
<p>属性:name、attrs</p>
</blockquote>
</li>
<li><p><strong>NavigableString</strong></p>
<blockquote>
<p>标签的文字部分的内容，用.string获取</p>
</blockquote>
</li>
<li><p><strong>BeautifulSoup</strong></p>
<blockquote>
<p>表示一个文档的内容</p>
</blockquote>
</li>
<li><p><strong>Comment</strong></p>
<blockquote>
<p>特殊类型的NavigableString 对象，其输出的内容不包括注释符号。 </p>
</blockquote>
</li>
</ul>
<h1 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h1><ul>
<li><strong>.contents：</strong> 获取Tag的所有子节点，返回一个list</li>
<li><strong>.children:</strong>  获取Tag的所有子节点，返回一个生成器</li>
<li><strong>.descendants</strong>：获取Tag的所有子孙节点 </li>
<li><strong>.strings：</strong>如果Tag包含多个字符串，即在子孙节点中有内容，可以用此获取，而后进行遍历 </li>
<li><strong>.stripped_strings：</strong>与strings用法一致，只不过可以去除掉那些多余的空白内容 </li>
<li><strong>.parent：</strong>获取Tag的父节点 </li>
<li><strong>.previous_sibling：</strong>获取当前Tag的上一个节点，属性通常是字符串或空白，真实结果是当前标签与上一个标签之间的顿号和换行符 </li>
<li><strong>.next_sibling：</strong>获取当前Tag的下一个节点，属性通常是字符串或空白，真是结果是当前标签与下一个标签之间的顿号与换行符 </li>
<li><strong>.previous_siblings：</strong>获取当前Tag的上面所有的兄弟节点，返回一个生成器 </li>
<li><strong>.next_siblings：</strong>获取当前Tag的下面所有的兄弟节点，返回一个生成器 </li>
<li><strong>.previous_element：</strong>获取解析过程中上一个被解析的对象(字符串或tag)，可能与previous_sibling相同，但通常是不一样的 </li>
<li><strong>.next_element：</strong>获取解析过程中下一个被解析的对象(字符串或tag)，可能与next_sibling相同，但通常是不一样的 </li>
<li><strong>.previous_elements：</strong>返回一个生成器，可以向前访问文档的解析内容 </li>
<li><strong>.next_elements：</strong>返回一个生成器，可以向后访问文档的解析内容 </li>
<li><strong>.has_attr：</strong>判断Tag是否包含属性 </li>
</ul>
<h1 id="搜索文档树"><a href="#搜索文档树" class="headerlink" title="搜索文档树"></a>搜索文档树</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">file = open(<span class="string">'./aa.html'</span>,<span class="string">'rb'</span>)</span><br><span class="line">html = file.read()</span><br><span class="line">bs = BeautifulSoup(html,<span class="string">'html.parser'</span>)</span><br><span class="line"><span class="comment"># name参数</span></span><br><span class="line">a_list = bs.find_all(<span class="string">"a"</span>)</span><br><span class="line">print(a_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果传入的是正则，则会根据search()来匹配内容</span></span><br><span class="line">print(<span class="string">"================================================================================="</span>)</span><br><span class="line">t_list = bs.find_all(re.compile(<span class="string">"a"</span>))</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> t_list:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是传入一个列表,将会与列表中的任意元素匹配到的结点返回</span></span><br><span class="line">print(<span class="string">"================================================================================="</span>)</span><br><span class="line">s_list = bs.find_all([<span class="string">"meta"</span>,<span class="string">"link"</span>])</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s_list:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入方法</span></span><br><span class="line">print(<span class="string">"=================================================================================="</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_is_exists</span><span class="params">(tag)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tag.has_attr(<span class="string">"a"</span>)</span><br><span class="line">f_list = bs.find_all(name_is_exists)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> file:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入kwargs参数</span></span><br><span class="line">print(<span class="string">"==================================================================================="</span>)</span><br><span class="line">g_list = bs.find_all(id = <span class="string">"head"</span>)</span><br><span class="line">print(g_list)</span><br><span class="line"></span><br><span class="line">re_list = bs.find_all(href = <span class="string">"http://news.baidu.com"</span>)</span><br><span class="line">print(re_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有包含class的Tag</span></span><br><span class="line">class_list = bs.find_all(class_ = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> class_list:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># arrrs参数</span></span><br><span class="line"><span class="comment"># 对html的data_*属性进行搜索时，</span></span><br><span class="line">data_list = bs.find_all(attrs=&#123;<span class="string">"data-foo"</span>:<span class="string">"value"</span>&#125;)</span><br><span class="line">print(data_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># text参数</span></span><br><span class="line">text1_list = bs.find_all(text=<span class="string">"hao123"</span>)</span><br><span class="line">print(text1_list)</span><br><span class="line"></span><br><span class="line">text2_list = bs.find_all(text=[<span class="string">"hao123"</span>,<span class="string">"地图"</span>,<span class="string">"贴吧"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索text的特殊场景时</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length_is_two</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> text <span class="keyword">and</span> len(text) == <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fun_list = bs.find_all(text=length_is_two)</span><br><span class="line">print(fun_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># limit参数，限制返回的数量</span></span><br><span class="line">limit_list = bs.find_all(<span class="string">"a"</span>,limit=<span class="number">2</span>)</span><br><span class="line">print(limit_list)</span><br></pre></td></tr></table></figure>



<h1 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h1><p>通过bs.select()方法选取具有对应样式的元素</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>正则表达式的使用</title>
    <url>/2020/03/01/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>正则表示式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特殊字符，及这些特殊字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>
<h1 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h1><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>\w</td>
<td>匹配字母数字及下划线</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母数字下划线</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空白字符,等价于{\t\n\r\f}</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意非空字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配任意数字，等价于{0-9}</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字</td>
</tr>
<tr>
<td>\A</td>
<td>匹配字符串开始</td>
</tr>
<tr>
<td>\Z</td>
<td>匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串</td>
</tr>
<tr>
<td>\z</td>
<td>匹配字符串结束</td>
</tr>
<tr>
<td>\G</td>
<td>匹配最后匹配完成的位置</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的末尾</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配任意字符</td>
</tr>
<tr>
<td>[…]</td>
<td>用来表示一组字符，单独列出。:[amk] 匹配’a’,’m’,’k’</td>
</tr>
<tr>
<td>[^…]</td>
<td>表示不在[]中的字符，[^ abc ]表示除了a,b,c之外的字符。</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或多个的表达式</td>
</tr>
<tr>
<td>+</td>
<td>匹配1个或多个的表达式</td>
</tr>
<tr>
<td>?</td>
<td>匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td>{n}</td>
<td>精确匹配n个前面表达式</td>
</tr>
<tr>
<td>{n,m}</td>
<td>匹配n到m此由前面正则表达式定义的片段，贪婪方式</td>
</tr>
<tr>
<td>a|b</td>
<td>匹配a或b</td>
</tr>
<tr>
<td>{}</td>
<td>匹配括号内的表达式，也表示一个组</td>
</tr>
</tbody></table>
<h1 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h1><p><strong>re.match</strong></p>
<p>re.match尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re.match(pattern,string,flags = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h2 id="最常规的匹配"><a href="#最常规的匹配" class="headerlink" title="最常规的匹配"></a>最常规的匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">"hello 123 4567 world_this is a regex demo"</span></span><br><span class="line">result = re.match(<span class="string">'^hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;.*demo$'</span>,content)</span><br></pre></td></tr></table></figure>



<h2 id="泛匹配"><a href="#泛匹配" class="headerlink" title="泛匹配"></a>泛匹配</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">"hello 123 4567 world_this is a regex demo"</span></span><br><span class="line">result = re.match(<span class="string">'^hello.*demo$'</span>,content)</span><br></pre></td></tr></table></figure>



<h2 id="匹配目标"><a href="#匹配目标" class="headerlink" title="匹配目标"></a>匹配目标</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">"hello 12345657 world_this is a regex demo"</span></span><br><span class="line">result = re.match(<span class="string">'^hello\s(\d+)\sworld.*demo$'</span>,content)</span><br></pre></td></tr></table></figure>



<h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .*会匹配尽可能多的字符串</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">"hello 12345657 world_this is a regex demo"</span></span><br><span class="line">result = re.match(<span class="string">'^he.*(\d+)\sworld.*demo$'</span>,content)</span><br></pre></td></tr></table></figure>



<h2 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#.*会匹配尽可能少的字符串</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">"hello 12345657 world_this is a regex demo"</span></span><br><span class="line">result = re.match(<span class="string">'^he.*?(\d+).*demo$'</span>,content)</span><br></pre></td></tr></table></figure>



<h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#re.S 为匹配模式</span></span><br><span class="line">content = <span class="string">"hello 1234567 world_this\nis a regex demo"</span></span><br><span class="line">result = re.match(<span class="string">'^he.*?(\d+).*?demo$'</span>,content,re.S)</span><br></pre></td></tr></table></figure>



<h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">"price is $5.00"</span></span><br><span class="line">result = re.match(<span class="string">'price is \$5\.00'</span>,content)</span><br></pre></td></tr></table></figure>

<h1 id="RE的常用方法"><a href="#RE的常用方法" class="headerlink" title="RE的常用方法"></a>RE的常用方法</h1><p><strong>re.search</strong></p>
<p>re.search扫描整个字符串并返回第一个成功的匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">"hello1234567 world_this is a regex demo extra stings"</span></span><br><span class="line">res = re.search(<span class="string">"he.*?\d+.*?demo$"</span>,content)</span><br></pre></td></tr></table></figure>

<p><strong>re.findAll()</strong></p>
<p>re.findAll()搜索整个字符串返回所有成功的匹配</p>
<p><strong>re.sub</strong></p>
<p>re.sub()搜索到符合的字符串，并进行替换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">'Extra stings hello 1234567 world_this is a regex extra stings'</span></span><br><span class="line">content = re.sub(<span class="string">'(\d+)'</span>,<span class="string">r'\1 8910'</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>r’\1 8910        r’\1 代表第一个匹配目标</p>
</blockquote>
<p><strong>re.compile</strong></p>
<p>re.compile()将正则字符串编译成正则字符串对象</p>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>-正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>记录npm下载依赖时的一些坑</title>
    <url>/2020/02/29/%E8%AE%B0%E5%BD%95vue-cli%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>   帮小伙伴本地部署nodejs项目时，小伙伴发现自己的项目启动不了,查看了一下终端发现报如下错误:</p>
<p><img src="/images/page3.png" alt="此图片无法访问"></p>
<p>经过把包删了重下，用yarn下依赖包等一系列操作以后，问题总算得到了解决。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">rm -rf node_modules</span><br><span class="line">npm cache clean -f      // 清除npm缓存</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure>

<p>当node_modules 出现某一些包错误时候，查不到原因时候，可以适当的清除缓存试试。删掉重新安装</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>-Vue -npm</tag>
      </tags>
  </entry>
  <entry>
    <title>解决pip下载速度慢的问题</title>
    <url>/2020/02/08/python-learn/</url>
    <content><![CDATA[<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>用国内镜像源代替</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install packgename -i url</span><br></pre></td></tr></table></figure>

<p>packgename : 需要下载包的名称</p>
<p>url : 国内镜像源的地址</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="windows下更换国内镜像源"><a href="#windows下更换国内镜像源" class="headerlink" title="windows下更换国内镜像源"></a>windows下更换国内镜像源</h3><ul>
<li>进入C:/Users/用户名/，在此目录下创建 <strong>pip</strong> 文件夹 </li>
<li>在 <strong>pip</strong> 目录下创建 <strong>pip.ini</strong> 文件, 内容如下</li>
</ul>
<blockquote>
<p>[global] </p>
<p>timeout = 6000</p>
<p>index-url = <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> </p>
<p>trusted-host = <a href="http://pypi.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">pypi.tuna.tsinghua.edu.cn</a> </p>
</blockquote>
<h3 id="Linux下更换镜像源"><a href="#Linux下更换镜像源" class="headerlink" title="Linux下更换镜像源"></a>Linux下更换镜像源</h3><ul>
<li>修改 <strong>~/.pip/pip.conf</strong> 文件, 没有则创建</li>
</ul>
<blockquote>
<p>[global] </p>
<p>timeout = 6000</p>
<p>index-url = <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> </p>
<p>trusted-host = <a href="http://pypi.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">pypi.tuna.tsinghua.edu.cn</a> </p>
</blockquote>
<h2 id="国内镜像源地址"><a href="#国内镜像源地址" class="headerlink" title="国内镜像源地址"></a>国内镜像源地址</h2><ul>
<li><a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a>       清华大学</li>
<li><a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a>             阿里云</li>
<li><a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a>         中国科技大学</li>
<li><a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a>                        豆瓣</li>
<li><a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a>           中国科学技术大学</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用Gogs搭建自己的专属仓库</title>
    <url>/2020/01/27/gogs/</url>
    <content><![CDATA[<h1 id="背景概述"><a href="#背景概述" class="headerlink" title="背景概述"></a>背景概述</h1><p>   作为一名程序员，工作中少不了将日常工作的代码传到github上，有些代码我们并不想将其公开，但是github的私有化需要支付额外的费用，所以这时候Gogs的出现就很好的为我们解决了这一问题。</p>
<h2 id="Gogs简介"><a href="#Gogs简介" class="headerlink" title="Gogs简介"></a>Gogs简介</h2><ol>
<li>gogs是一款极易搭建的自助 Git 服务, 掌握了它, 我们就可以搭建自己的git服务站点</li>
<li>gogs官网: <a href="https://gogs.io/github" target="_blank" rel="noopener">https://gogs.io/github</a></li>
<li>中文地址:<a href="https://github.com/gogs/gogs/blob/master/README_ZH.md" target="_blank" rel="noopener">https://github.com/gogs/gogs/blob/master/README_ZH.md</a></li>
</ol>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ol>
<li>centos7   </li>
<li>mysql</li>
<li>docker</li>
</ol>
<p>在此之前我们需要对docker的基础命令有一些基本的了解：</p>
<h5 id="docker命令补充"><a href="#docker命令补充" class="headerlink" title="docker命令补充:"></a>docker命令补充:</h5><p>docker run : 运行容器</p>
<p>–name:  给容器取个新名字</p>
<p>-d ： 后台运行</p>
<p>-p  :   将容器中的端口号与真机中的端口号做一个映射</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通过yum安装docker</span></span><br><span class="line">yum -y install docker</span><br><span class="line"><span class="meta">#</span><span class="bash">启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta">#</span><span class="bash">开机自启</span></span><br><span class="line">systemctl enable dockeer</span><br></pre></td></tr></table></figure>



<h3 id="下载gogs的docker镜像"><a href="#下载gogs的docker镜像" class="headerlink" title="下载gogs的docker镜像"></a>下载gogs的docker镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull gogs/gogs</span><br></pre></td></tr></table></figure>



<h3 id="创建gogs存储目录"><a href="#创建gogs存储目录" class="headerlink" title="创建gogs存储目录"></a>创建gogs存储目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p /var/gogs</span><br></pre></td></tr></table></figure>



<h3 id="在后台运行gogs"><a href="#在后台运行gogs" class="headerlink" title="在后台运行gogs"></a>在后台运行gogs</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name=gogs -d  -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs</span><br></pre></td></tr></table></figure>



<h2 id="部署mysql"><a href="#部署mysql" class="headerlink" title="部署mysql"></a>部署mysql</h2><p>由于我的服务器上原先就安装了mysql,因此就不做过多赘述。关于mysql在服务器上的安装，可以自行了解一下宝塔Linux面板，装mysql特别的方便~</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li><p>由于自己安装界面已经无法访问，于是从网上找的图片~</p>
<p><img src="/images/page_1.jpg" alt="此图片无法访问"></p>
<p>按照图片内容填写参数</p>
<p><img src="/images/page_2.jpg" alt=""></p>
<p>图片中配置的是sqllite，mysql也是一样的，首先保证你的mysql数据库是可以远程访问的，然后再按照图片上的要求填写数据库的主机号和端口号即可。</p>
</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p> 初见gogs, 我就被吸引到了, gogs功能强大, 设置简单, 完全开源, 对中文支持也很好, 如果你想建立自己的git站点, 而运维的经验又不怎么丰富, gogs是一个不错的选择~</p>
]]></content>
      <categories>
        <category>gogs</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2020/01/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h1><h3 id="专注于技术分享"><a href="#专注于技术分享" class="headerlink" title="专注于技术分享~"></a>专注于技术分享~</h3>]]></content>
      <categories>
        <category>categories</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
